{"version":3,"sources":["Pen.svg","Trash.svg","Todo.js","NewTodoForm.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Todo","className","this","props","content","style","marginRight","src","pen","alt","trash","onClick","remove","Component","NewTodoForm","state","id","uuidv4","handleChange","e","setState","target","value","handleSubmit","preventDefault","add","onSubmit","placeholder","type","name","onChange","TodoList","todos","todo","st","filter","map","key","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mGAAAA,EAAOC,QAAU,IAA0B,iC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,ySCKtBC,E,iLAEjB,OACE,yBAAKC,UAAU,QACb,0BAAMA,UAAU,gBAAgBC,KAAKC,MAAMC,SAC3C,yBAAKC,MAAO,CAAEC,YAAa,SAAWC,IAAKC,IAAKC,IAAI,SACpD,yBAAKF,IAAKG,IAAOD,IAAI,SAASE,QAAST,KAAKC,MAAMS,c,GANxBC,a,QCDbC,G,iNACnBC,MAAQ,CACNC,GAAIC,cACJb,QAAS,I,EAGXc,aAAe,SAACC,GACd,EAAKC,SAAS,CACZhB,QAASe,EAAEE,OAAOC,S,EAItBC,aAAe,SAACJ,GACdA,EAAEK,iBACF,EAAKrB,MAAMsB,IAAI,EAAKV,OACpB,EAAKK,SAAS,CACZJ,GAAIC,cACJb,QAAS,M,wEAKX,OACE,yBAAKH,UAAU,eACb,0BAAMyB,SAAUxB,KAAKqB,cACnB,2BACEtB,UAAU,oBACVqB,MAAOpB,KAAKa,MAAMX,QAClBuB,YAAY,WACZC,KAAK,OACLC,KAAK,MACLb,GAAG,MACHc,SAAU5B,KAAKgB,eAEjB,4BAAQjB,UAAU,sBAAlB,kB,GAlC+BY,cCCpBkB,G,iNACnBhB,MAAQ,CACNiB,MAAO,I,EAGTP,IAAM,SAACQ,GACL,EAAKb,UAAS,SAACc,GAAD,MAAS,CACrBF,MAAM,GAAD,mBAAME,EAAGF,OAAT,CAAgBC,S,EAIzBrB,OAAS,SAACI,GACR,EAAKI,UAAS,SAACL,GAAD,MAAY,CACxBiB,MAAO,EAAKjB,MAAMiB,MAAMG,QAAO,SAACF,GAAD,OAAUjB,IAAOiB,EAAKjB,W,wEAI/C,IAAD,OACP,OACE,yBAAKf,UAAU,YACZC,KAAKa,MAAMiB,MAAMI,KAAI,SAACH,GACrB,OACE,kBAAC,EAAD,CACEI,IAAKJ,EAAKjB,GACVZ,QAAS6B,EAAK7B,QACdQ,OAAQ,kBAAM,EAAKA,OAAOqB,EAAKjB,UAIrC,kBAAC,EAAD,CAAaS,IAAKvB,KAAKuB,W,GA7BOZ,cCavByB,MAdf,WACE,OACE,yBAAKrC,UAAU,OACb,yBAAKA,UAAU,cACb,0CACA,8DAEF,yBAAKA,UAAU,eACb,kBAAC,EAAD,SCAYsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.21e3aef9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Pen.6a012bd0.svg\";","module.exports = __webpack_public_path__ + \"static/media/Trash.53aaf428.svg\";","import React, { Component } from 'react';\nimport './Todo.css';\nimport pen from './Pen.svg';\nimport trash from './Trash.svg';\n\nexport default class Todo extends Component {\n  render() {\n    return (\n      <div className=\"Todo\">\n        <span className=\"Todo-content\">{this.props.content}</span>\n        <img style={{ marginRight: '.4rem' }} src={pen} alt=\"Edit\" />\n        <img src={trash} alt=\"Remove\" onClick={this.props.remove} />\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport './NewTodoForm.css';\n\nexport default class NewTodoForm extends Component {\n  state = {\n    id: uuidv4(),\n    content: '',\n  };\n\n  handleChange = (e) => {\n    this.setState({\n      content: e.target.value,\n    });\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.props.add(this.state);\n    this.setState({\n      id: uuidv4(),\n      content: '',\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"NewTodoForm\">\n        <form onSubmit={this.handleSubmit}>\n          <input\n            className=\"NewTodoForm-input\"\n            value={this.state.content}\n            placeholder=\"New Todo\"\n            type=\"text\"\n            name=\"add\"\n            id=\"add\"\n            onChange={this.handleChange}\n          />\n          <button className=\"NewTodoForm-button\">ADD TODO</button>\n        </form>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport Todo from './Todo';\nimport NewTodoForm from './NewTodoForm';\nimport './TodoList.css';\n\nexport default class TodoList extends Component {\n  state = {\n    todos: [],\n  };\n\n  add = (todo) => {\n    this.setState((st) => ({\n      todos: [...st.todos, todo],\n    }));\n  };\n\n  remove = (id) => {\n    this.setState((state) => ({\n      todos: this.state.todos.filter((todo) => id !== todo.id),\n    }));\n  };\n\n  render() {\n    return (\n      <div className=\"TodoList\">\n        {this.state.todos.map((todo) => {\n          return (\n            <Todo\n              key={todo.id}\n              content={todo.content}\n              remove={() => this.remove(todo.id)}\n            />\n          );\n        })}\n        <NewTodoForm add={this.add} />\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.css';\nimport TodoList from './TodoList';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"App-header\">\n        <h1>Todo List!</h1>\n        <h4>A Simple React Todo List App.</h4>\n      </div>\n      <div className=\"App-content\">\n        <TodoList />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}